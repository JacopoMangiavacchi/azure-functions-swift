// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/ClaimsIdentityRpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/// protobuf vscode extension: https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Light-weight representation of a .NET System.Security.Claims.ClaimsIdentity object.
/// This is the same serialization as found in EasyAuth, and needs to be kept in sync with
/// its ClaimsIdentitySlim definition, as seen in the WebJobs extension:
/// https://github.com/Azure/azure-webjobs-sdk-extensions/blob/dev/src/WebJobs.Extensions.Http/ClaimsIdentitySlim.cs
struct AzureFunctionsRpcMessages_RpcClaimsIdentity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var authenticationType: AzureFunctionsRpcMessages_NullableString {
    get {return _storage._authenticationType ?? AzureFunctionsRpcMessages_NullableString()}
    set {_uniqueStorage()._authenticationType = newValue}
  }
  /// Returns true if `authenticationType` has been explicitly set.
  var hasAuthenticationType: Bool {return _storage._authenticationType != nil}
  /// Clears the value of `authenticationType`. Subsequent reads from it will return its default value.
  mutating func clearAuthenticationType() {_uniqueStorage()._authenticationType = nil}

  var nameClaimType: AzureFunctionsRpcMessages_NullableString {
    get {return _storage._nameClaimType ?? AzureFunctionsRpcMessages_NullableString()}
    set {_uniqueStorage()._nameClaimType = newValue}
  }
  /// Returns true if `nameClaimType` has been explicitly set.
  var hasNameClaimType: Bool {return _storage._nameClaimType != nil}
  /// Clears the value of `nameClaimType`. Subsequent reads from it will return its default value.
  mutating func clearNameClaimType() {_uniqueStorage()._nameClaimType = nil}

  var roleClaimType: AzureFunctionsRpcMessages_NullableString {
    get {return _storage._roleClaimType ?? AzureFunctionsRpcMessages_NullableString()}
    set {_uniqueStorage()._roleClaimType = newValue}
  }
  /// Returns true if `roleClaimType` has been explicitly set.
  var hasRoleClaimType: Bool {return _storage._roleClaimType != nil}
  /// Clears the value of `roleClaimType`. Subsequent reads from it will return its default value.
  mutating func clearRoleClaimType() {_uniqueStorage()._roleClaimType = nil}

  var claims: [AzureFunctionsRpcMessages_RpcClaim] {
    get {return _storage._claims}
    set {_uniqueStorage()._claims = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Light-weight representation of a .NET System.Security.Claims.Claim object.
/// This is the same serialization as found in EasyAuth, and needs to be kept in sync with
/// its ClaimSlim definition, as seen in the WebJobs extension:
/// https://github.com/Azure/azure-webjobs-sdk-extensions/blob/dev/src/WebJobs.Extensions.Http/ClaimSlim.cs
struct AzureFunctionsRpcMessages_RpcClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: String = String()

  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "AzureFunctionsRpcMessages"

extension AzureFunctionsRpcMessages_RpcClaimsIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RpcClaimsIdentity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "authentication_type"),
    2: .standard(proto: "name_claim_type"),
    3: .standard(proto: "role_claim_type"),
    4: .same(proto: "claims"),
  ]

  fileprivate class _StorageClass {
    var _authenticationType: AzureFunctionsRpcMessages_NullableString? = nil
    var _nameClaimType: AzureFunctionsRpcMessages_NullableString? = nil
    var _roleClaimType: AzureFunctionsRpcMessages_NullableString? = nil
    var _claims: [AzureFunctionsRpcMessages_RpcClaim] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _authenticationType = source._authenticationType
      _nameClaimType = source._nameClaimType
      _roleClaimType = source._roleClaimType
      _claims = source._claims
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._authenticationType)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._nameClaimType)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._roleClaimType)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._claims)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._authenticationType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._nameClaimType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._roleClaimType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._claims.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._claims, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AzureFunctionsRpcMessages_RpcClaimsIdentity, rhs: AzureFunctionsRpcMessages_RpcClaimsIdentity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._authenticationType != rhs_storage._authenticationType {return false}
        if _storage._nameClaimType != rhs_storage._nameClaimType {return false}
        if _storage._roleClaimType != rhs_storage._roleClaimType {return false}
        if _storage._claims != rhs_storage._claims {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AzureFunctionsRpcMessages_RpcClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RpcClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AzureFunctionsRpcMessages_RpcClaim, rhs: AzureFunctionsRpcMessages_RpcClaim) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shared/NullableTypes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/// protobuf vscode extension: https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct AzureFunctionsRpcMessages_NullableString {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var string: AzureFunctionsRpcMessages_NullableString.OneOf_String? = nil

  var value: String {
    get {
      if case .value(let v)? = string {return v}
      return String()
    }
    set {string = .value(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_String: Equatable {
    case value(String)

  #if !swift(>=4.1)
    static func ==(lhs: AzureFunctionsRpcMessages_NullableString.OneOf_String, rhs: AzureFunctionsRpcMessages_NullableString.OneOf_String) -> Bool {
      switch (lhs, rhs) {
      case (.value(let l), .value(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct AzureFunctionsRpcMessages_NullableDouble {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var double: AzureFunctionsRpcMessages_NullableDouble.OneOf_Double? = nil

  var value: Double {
    get {
      if case .value(let v)? = double {return v}
      return 0
    }
    set {double = .value(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Double: Equatable {
    case value(Double)

  #if !swift(>=4.1)
    static func ==(lhs: AzureFunctionsRpcMessages_NullableDouble.OneOf_Double, rhs: AzureFunctionsRpcMessages_NullableDouble.OneOf_Double) -> Bool {
      switch (lhs, rhs) {
      case (.value(let l), .value(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct AzureFunctionsRpcMessages_NullableBool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bool: AzureFunctionsRpcMessages_NullableBool.OneOf_Bool? = nil

  var value: Bool {
    get {
      if case .value(let v)? = bool {return v}
      return false
    }
    set {bool = .value(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Bool: Equatable {
    case value(Bool)

  #if !swift(>=4.1)
    static func ==(lhs: AzureFunctionsRpcMessages_NullableBool.OneOf_Bool, rhs: AzureFunctionsRpcMessages_NullableBool.OneOf_Bool) -> Bool {
      switch (lhs, rhs) {
      case (.value(let l), .value(let r)): return l == r
      }
    }
  #endif
  }

  init() {}
}

struct AzureFunctionsRpcMessages_NullableTimestamp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: OneOf_Timestamp? {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  var value: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .value(let v)? = _storage._timestamp {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {_uniqueStorage()._timestamp = .value(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Timestamp: Equatable {
    case value(SwiftProtobuf.Google_Protobuf_Timestamp)

  #if !swift(>=4.1)
    static func ==(lhs: AzureFunctionsRpcMessages_NullableTimestamp.OneOf_Timestamp, rhs: AzureFunctionsRpcMessages_NullableTimestamp.OneOf_Timestamp) -> Bool {
      switch (lhs, rhs) {
      case (.value(let l), .value(let r)): return l == r
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "AzureFunctionsRpcMessages"

extension AzureFunctionsRpcMessages_NullableString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NullableString"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.string != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.string = .value(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .value(let v)? = self.string {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AzureFunctionsRpcMessages_NullableString, rhs: AzureFunctionsRpcMessages_NullableString) -> Bool {
    if lhs.string != rhs.string {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AzureFunctionsRpcMessages_NullableDouble: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NullableDouble"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.double != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.double = .value(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .value(let v)? = self.double {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AzureFunctionsRpcMessages_NullableDouble, rhs: AzureFunctionsRpcMessages_NullableDouble) -> Bool {
    if lhs.double != rhs.double {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AzureFunctionsRpcMessages_NullableBool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NullableBool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.bool != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.bool = .value(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .value(let v)? = self.bool {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AzureFunctionsRpcMessages_NullableBool, rhs: AzureFunctionsRpcMessages_NullableBool) -> Bool {
    if lhs.bool != rhs.bool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AzureFunctionsRpcMessages_NullableTimestamp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NullableTimestamp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _timestamp: AzureFunctionsRpcMessages_NullableTimestamp.OneOf_Timestamp?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: SwiftProtobuf.Google_Protobuf_Timestamp?
          if let current = _storage._timestamp {
            try decoder.handleConflictingOneOf()
            if case .value(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._timestamp = .value(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if case .value(let v)? = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AzureFunctionsRpcMessages_NullableTimestamp, rhs: AzureFunctionsRpcMessages_NullableTimestamp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
